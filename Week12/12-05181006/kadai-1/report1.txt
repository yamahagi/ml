05-181006 大萩雅也

eq(a,c).を問い合わせた時に論理的解釈だとルールを上から適用する必要がないので
(1)eq(X,Z) :- eq(X,Y),eq(Y,Z).
その結果eq(a,Y),eq(Y,c).
(2)eq(a,b)
その結果eq(b,c)
(3)eq(X,Y):- eq(Y,X).
その結果eq(c,b)
(4)eq(c,b)
を適用することでtrueが得られる。

しかし、Prolog処理系ではルール適用の優先度が上の方が高いのでeq(a,c)を問い合わせると
(1)eq(X,Z) :- eq(X,Y),eq(Y,Z).
その結果eq(a,Y),eq(Y,c).
(2)eq(a,b)
を行った後、eq(b,c)が残り、それにまたeq(X,Z):-eq(X,Y),eq(Y,Z).が適用され
その結果eq(b,Y),eq(Y,Z)が残り、
以降はeq(b,Y)に対してこの規則が適用され続けるのでOUt Of local Stackとなる。

プログラムの順序を変えるか、並行してそれぞれ4つの規則を適用することができるようにprolog処理系を変えればこの差は埋まる。
