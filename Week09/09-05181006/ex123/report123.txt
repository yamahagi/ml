05-181006 大萩雅也

問1
EPair(e1,e2)はe1,e2をそれぞれ評価した上でVPairとして評価する
ENilはVNilとして評価。
ECons(e1,e2)を評価した上でVConsとして評価。

問２
パターンマッチングEMatch(e1,list1)として、eval_exprにEMatchの評価を追加した。
式e1をeval_exprで評価した後、find_matchでそのvとlist1内の全てのパターンを照合する。
いずれとも照合しなかった場合は、MatchErrを返す。

問３
ptopという関数でパターンを(型,追加する制約,追加する環境)に変換する。
変換の方法はスライドに準拠している。
ニルパターン、コンスパターンの時のためにリスト型としてtyにTyListを追加した。
また、制約の生成においてmatch_append関数で生成した制約を追加した。
ty_unifyはスライドに準拠してTyPairとTyListを追加した。


実行例(print_typeの後すぐprint_valueをしているのでa1aのように表示されています。わかりにくくて申し訳ありません。

パターンマッチ実装できたと思っていたのですが実行例見てみるとできていないようです。

# let a = 1::2::[];;
a1a = [1;2]
# let b = (1,2)::(3,4)::[];;
a2b = [(1, 2);(3, 4)]
# [];;
a3- = []
#let rec lis a = match a with |[] -> [] |b::xs -> b::xs;;       
(a24->a25)
lis = fun
# lis 1::2::[];;
a35
