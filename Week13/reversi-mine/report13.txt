05-181006 大萩雅也

序盤、中盤は評価関数によって4手先まで先読みを行います。
評価関数は主に評価盤と着手可能数を用いて計算され、相手が置く場所がない、または自分が置く場所がないとなった場合は50ポイントのプラスまたはマイナスがなされます。
着手可能数と評価盤の重み付けですが、着手可能数の重みを評価盤による評価の３倍にすると勝つ確率が高くなったのでそのようにしました。

終盤は10手手前から先読みを実行し、自分がある手を打ち、白がその手に対して打てる手の中からある手を打った際の最終的な勝敗の数をそれ以降の全探索で全ての打てる手の中の手に対して調べています。
要は、自分がその手を打ったあと白がある手を打った際自分が必敗となる手が存在するかどうかを調べ、存在するならばその手を避けようという考え方です。
必敗とならない手が複数存在するならば、その手の中で負ける割合に対して勝つ割合が最も高い手を選ぶようにしています。

序盤は定石のデータベースを作ってそれを元に動かそうと思ったのですが締め切りに間に合いませんでした。
一応途中経過までがdatabase.ml内に残っています。

一応この実装によってランダム打ちにはほぼ100%勝てるようになり、またgithub上で見つけた二つのreversiプログラム
https://github.com/mamurai-0/Univ_lectures/tree/master/funcpro/10-161003/reversi-ml
と
https://github.com/touyou/FPExperiment/tree/master/13-171023
にはどちらも全勝することができました。

完成するのが遅く友達とは対戦できていないのですが、
評価関数の読みがそこまで深くなく、また終盤の完全読みのメリットを僕があまりよく理解できていなく、「勝つためのアルゴリズム」でなく「負けないためのアルゴリズム」（しかも結果的には一手先までしか読めていない）しか実装できていないので
強いAIにはほぼ勝てないものと思われます。
具体的に言うと例えば、盤面上のある位置に置くことによって相手を一回パスさせられる手があるとして、そこに早めに置くのかもしくは後回しにして先に他のところに置くのかの判断が全探索の末の勝率という曖昧なものに依存するためそこまできっちりとした判断ができないということが一つあります。

